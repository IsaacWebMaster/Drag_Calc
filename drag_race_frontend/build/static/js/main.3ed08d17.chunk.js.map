{"version":3,"sources":["components/ReactionTimeModal.js","App.js","index.js"],"names":["ReactionTimeModal","_ref","onClose","isPreparing","setIsPreparing","useState","reactionTime","setReactionTime","startTime","setStartTime","errorMessage","setErrorMessage","isMobile","setIsMobile","useEffect","window","innerWidth","prepareTimeout","setTimeout","Date","now","Math","random","handleKeyDown","e","code","addEventListener","clearTimeout","removeEventListener","_jsxs","className","children","_jsx","_Fragment","onClick","handleMobilePress","App","power","setPower","weight","setWeight","tireSize","setTireSize","nitrous","setNitrous","engineBuild","setEngineBuild","performanceResult","setPerformanceResult","isModalOpen","setIsModalOpen","onSubmit","preventDefault","effectivePower","parseFloat","quarterMileTime","toFixed","type","value","onChange","target","required","disabled","openModal","onReactionRecorded","time","closeModal","showMobileButton","reactionTimeButton","document","querySelector","mobileReactionTimeButton","style","display","onload","onresize","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.3ed08d17.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ReactionTimeModal({ onClose }) {\n    const [isPreparing, setIsPreparing] = useState(true);\n    const [reactionTime, setReactionTime] = useState(null);\n    const [startTime, setStartTime] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [isMobile, setIsMobile] = useState(false);\n\n    useEffect(() => {\n        // Detect if the user is on a mobile device\n        setIsMobile(window.innerWidth <= 768);\n\n        const prepareTimeout = setTimeout(() => {\n            setIsPreparing(false);\n            setStartTime(Date.now());\n        }, Math.random() * 3000 + 2000); // Random delay between 2-5 seconds for preparation\n\n        const handleKeyDown = (e) => {\n            if (e.code === 'Space' && !isPreparing) {\n                setReactionTime(Date.now() - startTime);\n            } else if (isPreparing) {\n                setErrorMessage('Wait for the light to turn green!');\n            }\n        };\n\n        // Add event listener for spacebar press\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            clearTimeout(prepareTimeout);\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [isPreparing, startTime]);\n\n    const handleMobilePress = () => {\n        if (!isPreparing) {\n            setReactionTime(Date.now() - startTime);\n        } else {\n            setErrorMessage('Wait for the light to turn green!');\n        }\n    };\n\n    return (\n        <div className=\"modal\">\n            <h2>Test Your Reaction Time!</h2>\n            {reactionTime === null ? (\n                <>\n                    <p>{isPreparing ? 'Prepare...' : 'GO!'}</p>\n                    <div className=\"reaction-circle\" />\n                    {isMobile && (\n                        <button className=\"mobile-button\" onClick={handleMobilePress}>\n                            PUSH\n                        </button>\n                    )}\n                    <p className=\"error-message\">{errorMessage}</p>\n                    <button className=\"close-button\" onClick={onClose}>\n                        CLOSE\n                    </button>\n                </>\n            ) : (\n                <>\n                    <p>Your Reaction Time: {reactionTime} ms</p>\n                    <button className=\"close-button\" onClick={onClose}>\n                        CLOSE\n                    </button>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ReactionTimeModal;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ReactionTimeModal from './components/ReactionTimeModal';\n\nfunction App() {\n  const [power, setPower] = useState('');\n  const [weight, setWeight] = useState('');\n  const [tireSize, setTireSize] = useState('');\n  const [nitrous, setNitrous] = useState('');\n  const [engineBuild, setEngineBuild] = useState(''); // Default to 'Choose'\n  const [performanceResult, setPerformanceResult] = useState(null);\n  const [reactionTime, setReactionTime] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Function to handle recording of reaction time\n  const handleReactionRecorded = (time) => {\n    setReactionTime(time);\n  };\n\n  // Function to handle opening the modal\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  // Function to handle closing the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Function to handle form submission and calculate performance\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (power && weight) {\n      // Calculate effective power based on engine build type\n      let effectivePower = parseFloat(power) + parseFloat(nitrous || 0);\n      if (engineBuild === '1') {\n        // Stock: Subtract 5%\n        effectivePower *= 0.95;\n      } else if (engineBuild === '2') {\n        // Mildly Built: No adjustment\n        effectivePower = effectivePower;\n      } else if (engineBuild === '3') {\n        // Fully Built: Add 5%\n        effectivePower *= 1.05;\n      }\n\n      // Simple calculation for drag race performance (example formula)\n      const quarterMileTime = ((parseFloat(weight) / effectivePower) ** 0.333) * 5.825;\n      setPerformanceResult(quarterMileTime.toFixed(2));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Isaac's Drag Race Performance Calculator</h1>\n\n      {/* Existing form for drag race calculations */}\n      <div className=\"calculator-form\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            Engine Power (HP):\n            <input\n              type=\"number\"\n              value={power}\n              onChange={(e) => setPower(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Car Weight (LB):\n            <input\n              type=\"number\"\n              value={weight}\n              onChange={(e) => setWeight(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Tire Size (Inches):\n            <input\n              type=\"number\"\n              value={tireSize}\n              onChange={(e) => setTireSize(e.target.value)}\n            />\n          </label>\n          <label>\n            Nitrous Shot (HP):\n            <input\n              type=\"number\"\n              value={nitrous}\n              onChange={(e) => setNitrous(e.target.value)}\n            />\n          </label>\n          <label>\n            Engine Build:\n            <select value={engineBuild} onChange={(e) => setEngineBuild(e.target.value)} required>\n              <option value=\"\" disabled>\n                Choose\n              </option>\n              <option value=\"1\">Stock</option>\n              <option value=\"2\">Mildly Built</option>\n              <option value=\"3\">Fully Built</option>\n            </select>\n          </label>\n          <button type=\"submit\">Calculate Performance</button>\n        </form>\n      </div>\n\n      {/* Display performance result */}\n      {performanceResult && (\n        <div className=\"performance-result\">\n          <h2>Estimated Quarter-Mile Time: {performanceResult} seconds</h2>\n        </div>\n      )}\n\n      {/* Display reaction time on main calculator */}\n      {reactionTime && (\n        <div className=\"main-reaction-time-display\">\n          Last Recorded Reaction Time: {reactionTime} seconds\n        </div>\n      )}\n\n      {/* Button to open Reaction Time Modal */}\n      <button onClick={openModal}>Test Your Reaction Time</button>\n\n      {/* Include Reaction Time Modal */}\n      {isModalOpen && (\n        <ReactionTimeModal\n          onReactionRecorded={handleReactionRecorded}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\nfunction isMobileDevice() {\n  return window.innerWidth <= 768;\n}\n\nfunction showMobileButton() {\n  const reactionTimeButton = document.querySelector('.reaction-time-button');\n  const mobileReactionTimeButton = document.querySelector('.mobile-reaction-time-button');\n\n  if (isMobileDevice()) {\n    mobileReactionTimeButton.style.display = 'block';\n    reactionTimeButton.style.display = 'none';\n  } else {\n    mobileReactionTimeButton.style.display = 'none';\n    reactionTimeButton.style.display = 'block';\n  }\n}\n\nwindow.onload = showMobileButton;\nwindow.onresize = showMobileButton;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}