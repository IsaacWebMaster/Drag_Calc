{"version":3,"sources":["components/ReactionTimeModal.js","App.js","index.js"],"names":["ReactionTimeModal","_ref","onClose","onReactionRecorded","countdown","setCountdown","useState","startTime","setStartTime","reactionTime","setReactionTime","isHoldingSpace","setIsHoldingSpace","lightColor","setLightColor","isReady","setIsReady","redlight","setRedlight","countdownIntervalRef","useRef","timeoutRef","recordReaction","useCallback","reactionDuration","Date","getTime","toFixed","console","log","clearInterval","current","clearTimeout","useEffect","handleKeyDown","event","code","startCountdown","handleKeyUp","document","addEventListener","removeEventListener","count","setInterval","initiateReactionTest","setTimeout","time","_jsx","className","children","_jsxs","style","color","backgroundColor","onClick","App","power","setPower","weight","setWeight","tireSize","setTireSize","nitrous","setNitrous","engineBuild","setEngineBuild","performanceResult","setPerformanceResult","isModalOpen","setIsModalOpen","onSubmit","e","preventDefault","effectivePower","parseFloat","quarterMileTime","type","value","onChange","target","required","disabled","openModal","closeModal","showMobileButton","reactionTimeButton","querySelector","mobileReactionTimeButton","window","innerWidth","display","onload","onresize","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.987daecc.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './ReactionTimeModal.css';\n\nconst ReactionTimeModal = ({ onClose, onReactionRecorded }) => {\n  const [countdown, setCountdown] = useState('Prepare...');\n  const [startTime, setStartTime] = useState(null);\n  const [reactionTime, setReactionTime] = useState(null);\n  const [isHoldingSpace, setIsHoldingSpace] = useState(false);\n  const [lightColor, setLightColor] = useState('red');\n  const [isReady, setIsReady] = useState(false); // Track readiness\n  const [redlight, setRedlight] = useState(false); // Track if the user redlit\n  const countdownIntervalRef = useRef(null); // Reference for the countdown interval\n  const timeoutRef = useRef(null); // Reference for the green light timeout\n\n  // Record reaction time\n  const recordReaction = useCallback(() => {\n    if (startTime && isReady) {\n      const endTime = new Date().getTime();\n      const reactionDuration = ((endTime - startTime) / 1000).toFixed(3);\n      console.log(`Reaction time recorded: ${reactionDuration} seconds`);\n      setReactionTime(reactionDuration);\n      onReactionRecorded(reactionDuration); // Pass reaction time to the main calculator\n      setStartTime(null);\n      setLightColor('red');\n      setCountdown('Prepare...');\n      setIsReady(false);\n    } else if (!isReady) {\n      console.log('You redlit!');\n      setRedlight(true);\n      setCountdown('You redlit! Hold spacebar to try again.');\n      setLightColor('red');\n      clearInterval(countdownIntervalRef.current); // Stop the countdown if redlit\n      clearTimeout(timeoutRef.current); // Stop any pending timeouts\n    } else {\n      console.log('Reaction not recorded because startTime is null.');\n    }\n  }, [startTime, isReady, onReactionRecorded]);\n\n  // Handle key press events\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.code === 'Space' && !isHoldingSpace) {\n        console.log('Spacebar pressed down');\n        setIsHoldingSpace(true);\n        if (redlight) {\n          // Reset redlight state and start countdown again\n          setRedlight(false);\n          startCountdown();\n        } else {\n          startCountdown(); // Start countdown on spacebar press\n        }\n      }\n    };\n\n    const handleKeyUp = (event) => {\n      if (event.code === 'Space' && isHoldingSpace) {\n        console.log('Spacebar released');\n        setIsHoldingSpace(false);\n        recordReaction(); // Record reaction on spacebar release\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [isHoldingSpace, redlight, recordReaction]);\n\n  // Start countdown\n  const startCountdown = () => {\n    setCountdown('Get Ready...');\n    setLightColor('yellow');\n    setReactionTime(null);\n    setIsReady(false);\n    console.log('Countdown started, preparing...');\n    let count = 3;\n\n    countdownIntervalRef.current = setInterval(() => {\n      if (count > 0) {\n        console.log(`Countdown: ${count}`);\n        setCountdown(count);\n        count--;\n      } else {\n        clearInterval(countdownIntervalRef.current);\n        initiateReactionTest();\n      }\n    }, 1000);\n  };\n\n  // Initiate the reaction test phase\n  const initiateReactionTest = () => {\n    console.log('Initiating reaction test...');\n    setCountdown('Hold the spacebar...');\n    setLightColor('yellow');\n\n    // Set a 1-second delay before turning green\n    timeoutRef.current = setTimeout(() => {\n      setCountdown('GO!');\n      setLightColor('green');\n      const time = new Date().getTime();\n      setStartTime(time);\n      setIsReady(true);\n      console.log('Timer started, startTime set:', time);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n          <h2>Test Your Reaction Time!</h2>\n          <div\n            className=\"countdown-display\"\n            style={{\n              color: countdown === 'GO!' ? '#00ff00' : '#ffcc00',\n            }}\n          >\n            {countdown}\n          </div>\n          <div\n            className=\"light-indicator\"\n            style={{\n              backgroundColor: lightColor,\n            }}\n          ></div>\n          <p>Press and hold the spacebar, then release when the light turns green!</p>\n          {reactionTime && (\n            <div className=\"reaction-time-result\">\n              Your Reaction Time: {reactionTime} seconds\n            </div>\n          )}\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReactionTimeModal;\n\n\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport ReactionTimeModal from './components/ReactionTimeModal';\n\nfunction App() {\n  const [power, setPower] = useState('');\n  const [weight, setWeight] = useState('');\n  const [tireSize, setTireSize] = useState('');\n  const [nitrous, setNitrous] = useState('');\n  const [engineBuild, setEngineBuild] = useState(''); // Default to 'Choose'\n  const [performanceResult, setPerformanceResult] = useState(null);\n  const [reactionTime, setReactionTime] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Function to handle recording of reaction time\n  const handleReactionRecorded = (time) => {\n    setReactionTime(time);\n  };\n\n  // Function to handle opening the modal\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  // Function to handle closing the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Function to handle form submission and calculate performance\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (power && weight) {\n      // Calculate effective power based on engine build type\n      let effectivePower = parseFloat(power) + parseFloat(nitrous || 0);\n      if (engineBuild === '1') {\n        // Stock: Subtract 5%\n        effectivePower *= 0.95;\n      } else if (engineBuild === '2') {\n        // Mildly Built: No adjustment\n        effectivePower = effectivePower;\n      } else if (engineBuild === '3') {\n        // Fully Built: Add 5%\n        effectivePower *= 1.05;\n      }\n\n      // Simple calculation for drag race performance (example formula)\n      const quarterMileTime = ((parseFloat(weight) / effectivePower) ** 0.333) * 5.825;\n      setPerformanceResult(quarterMileTime.toFixed(2));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Isaac's Drag Race Performance Calculator</h1>\n\n      {/* Existing form for drag race calculations */}\n      <div className=\"calculator-form\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            Engine Power (HP):\n            <input\n              type=\"number\"\n              value={power}\n              onChange={(e) => setPower(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Car Weight (LB):\n            <input\n              type=\"number\"\n              value={weight}\n              onChange={(e) => setWeight(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Tire Size (Inches):\n            <input\n              type=\"number\"\n              value={tireSize}\n              onChange={(e) => setTireSize(e.target.value)}\n            />\n          </label>\n          <label>\n            Nitrous Shot (HP):\n            <input\n              type=\"number\"\n              value={nitrous}\n              onChange={(e) => setNitrous(e.target.value)}\n            />\n          </label>\n          <label>\n            Engine Build:\n            <select value={engineBuild} onChange={(e) => setEngineBuild(e.target.value)} required>\n              <option value=\"\" disabled>\n                Choose\n              </option>\n              <option value=\"1\">Stock</option>\n              <option value=\"2\">Mildly Built</option>\n              <option value=\"3\">Fully Built</option>\n            </select>\n          </label>\n          <button type=\"submit\">Calculate Performance</button>\n        </form>\n      </div>\n\n      {/* Display performance result */}\n      {performanceResult && (\n        <div className=\"performance-result\">\n          <h2>Estimated Quarter-Mile Time: {performanceResult} seconds</h2>\n        </div>\n      )}\n\n      {/* Display reaction time on main calculator */}\n      {reactionTime && (\n        <div className=\"main-reaction-time-display\">\n          Last Recorded Reaction Time: {reactionTime} seconds\n        </div>\n      )}\n\n      {/* Button to open Reaction Time Modal */}\n      <button onClick={openModal}>Test Your Reaction Time</button>\n\n      {/* Include Reaction Time Modal */}\n      {isModalOpen && (\n        <ReactionTimeModal\n          onReactionRecorded={handleReactionRecorded}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\nfunction isMobileDevice() {\n  return window.innerWidth <= 768;\n}\n\nfunction showMobileButton() {\n  const reactionTimeButton = document.querySelector('.reaction-time-button');\n  const mobileReactionTimeButton = document.querySelector('.mobile-reaction-time-button');\n\n  if (isMobileDevice()) {\n    mobileReactionTimeButton.style.display = 'block';\n    reactionTimeButton.style.display = 'none';\n  } else {\n    mobileReactionTimeButton.style.display = 'none';\n    reactionTimeButton.style.display = 'block';\n  }\n}\n\nwindow.onload = showMobileButton;\nwindow.onresize = showMobileButton;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}