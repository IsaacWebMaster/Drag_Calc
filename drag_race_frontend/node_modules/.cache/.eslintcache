[{"/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/index.js":"1","/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/App.js":"2","/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/components/ReactionTimeModal.js":"3"},{"size":252,"mtime":1728094119749,"results":"4","hashOfConfig":"5"},{"size":4216,"mtime":1728180940112,"results":"6","hashOfConfig":"5"},{"size":4774,"mtime":1728180867671,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ilxokw",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/index.js",[],["17","18"],"/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/App.js",["19"],"import React, { useState } from 'react';\nimport './App.css';\nimport ReactionTimeModal from './components/ReactionTimeModal';\n\nfunction App() {\n  const [power, setPower] = useState('');\n  const [weight, setWeight] = useState('');\n  const [tireSize, setTireSize] = useState('');\n  const [nitrous, setNitrous] = useState('');\n  const [engineBuild, setEngineBuild] = useState(''); // Default to 'Choose'\n  const [performanceResult, setPerformanceResult] = useState(null);\n  const [reactionTime, setReactionTime] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Function to handle recording of reaction time\n  const handleReactionRecorded = (time) => {\n    setReactionTime(time);\n  };\n\n  // Function to handle opening the modal\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  // Function to handle closing the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Function to handle form submission and calculate performance\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (power && weight) {\n      // Calculate effective power based on engine build type\n      let effectivePower = parseFloat(power) + parseFloat(nitrous || 0);\n      if (engineBuild === '1') {\n        // Stock: Subtract 5%\n        effectivePower *= 0.95;\n      } else if (engineBuild === '2') {\n        // Mildly Built: No adjustment\n        effectivePower = effectivePower;\n      } else if (engineBuild === '3') {\n        // Fully Built: Add 5%\n        effectivePower *= 1.05;\n      }\n\n      // Simple calculation for drag race performance (example formula)\n      const quarterMileTime = ((parseFloat(weight) / effectivePower) ** 0.333) * 5.825;\n      setPerformanceResult(quarterMileTime.toFixed(2));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Isaac's Drag Race Performance Calculator</h1>\n\n      {/* Existing form for drag race calculations */}\n      <div className=\"calculator-form\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            Engine Power (HP):\n            <input\n              type=\"number\"\n              value={power}\n              onChange={(e) => setPower(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Car Weight (LB):\n            <input\n              type=\"number\"\n              value={weight}\n              onChange={(e) => setWeight(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            Tire Size (Inches):\n            <input\n              type=\"number\"\n              value={tireSize}\n              onChange={(e) => setTireSize(e.target.value)}\n            />\n          </label>\n          <label>\n            Nitrous Shot (HP):\n            <input\n              type=\"number\"\n              value={nitrous}\n              onChange={(e) => setNitrous(e.target.value)}\n            />\n          </label>\n          <label>\n            Engine Build:\n            <select value={engineBuild} onChange={(e) => setEngineBuild(e.target.value)} required>\n              <option value=\"\" disabled>\n                Choose\n              </option>\n              <option value=\"1\">Stock</option>\n              <option value=\"2\">Mildly Built</option>\n              <option value=\"3\">Fully Built</option>\n            </select>\n          </label>\n          <button type=\"submit\">Calculate Performance</button>\n        </form>\n      </div>\n\n      {/* Display performance result */}\n      {performanceResult && (\n        <div className=\"performance-result\">\n          <h2>Estimated Quarter-Mile Time: {performanceResult} seconds</h2>\n        </div>\n      )}\n\n      {/* Display reaction time on main calculator */}\n      {reactionTime && (\n        <div className=\"main-reaction-time-display\">\n          Last Recorded Reaction Time: {reactionTime} seconds\n        </div>\n      )}\n\n      {/* Button to open Reaction Time Modal */}\n      <button onClick={openModal}>Test Your Reaction Time</button>\n\n      {/* Include Reaction Time Modal */}\n      {isModalOpen && (\n        <ReactionTimeModal\n          onReactionRecorded={handleReactionRecorded}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n","/Users/danielcornier/Desktop/Drag Calc Isaac/drag_race_frontend/src/components/ReactionTimeModal.js",["20"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './ReactionTimeModal.css';\n\nconst ReactionTimeModal = ({ onClose, onReactionRecorded }) => {\n  const [countdown, setCountdown] = useState('Prepare...');\n  const [startTime, setStartTime] = useState(null);\n  const [reactionTime, setReactionTime] = useState(null);\n  const [isHoldingSpace, setIsHoldingSpace] = useState(false);\n  const [lightColor, setLightColor] = useState('red');\n  const [isReady, setIsReady] = useState(false); // Track readiness\n  const [redlight, setRedlight] = useState(false); // Track if the user redlit\n  const countdownIntervalRef = useRef(null); // Reference for the countdown interval\n  const timeoutRef = useRef(null); // Reference for the green light timeout\n\n  // Record reaction time\n  const recordReaction = useCallback(() => {\n    if (startTime && isReady) {\n      const endTime = new Date().getTime();\n      const reactionDuration = ((endTime - startTime) / 1000).toFixed(3);\n      console.log(`Reaction time recorded: ${reactionDuration} seconds`);\n      setReactionTime(reactionDuration);\n      onReactionRecorded(reactionDuration); // Pass reaction time to the main calculator\n      setStartTime(null);\n      setLightColor('red');\n      setCountdown('Prepare...');\n      setIsReady(false);\n    } else if (!isReady) {\n      console.log('You redlit!');\n      setRedlight(true);\n      setCountdown('You redlit! Hold spacebar to try again.');\n      setLightColor('red');\n      clearInterval(countdownIntervalRef.current); // Stop the countdown if redlit\n      clearTimeout(timeoutRef.current); // Stop any pending timeouts\n    } else {\n      console.log('Reaction not recorded because startTime is null.');\n    }\n  }, [startTime, isReady, onReactionRecorded]);\n\n  // Handle key press events\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.code === 'Space' && !isHoldingSpace) {\n        console.log('Spacebar pressed down');\n        setIsHoldingSpace(true);\n        if (redlight) {\n          // Reset redlight state and start countdown again\n          setRedlight(false);\n          startCountdown();\n        } else {\n          startCountdown(); // Start countdown on spacebar press\n        }\n      }\n    };\n\n    const handleKeyUp = (event) => {\n      if (event.code === 'Space' && isHoldingSpace) {\n        console.log('Spacebar released');\n        setIsHoldingSpace(false);\n        recordReaction(); // Record reaction on spacebar release\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [isHoldingSpace, redlight, recordReaction]);\n\n  // Start countdown\n  const startCountdown = () => {\n    setCountdown('Get Ready...');\n    setLightColor('yellow');\n    setReactionTime(null);\n    setIsReady(false);\n    console.log('Countdown started, preparing...');\n    let count = 3;\n\n    countdownIntervalRef.current = setInterval(() => {\n      if (count > 0) {\n        console.log(`Countdown: ${count}`);\n        setCountdown(count);\n        count--;\n      } else {\n        clearInterval(countdownIntervalRef.current);\n        initiateReactionTest();\n      }\n    }, 1000);\n  };\n\n  // Initiate the reaction test phase\n  const initiateReactionTest = () => {\n    console.log('Initiating reaction test...');\n    setCountdown('Hold the spacebar...');\n    setLightColor('yellow');\n\n    // Set a 1-second delay before turning green\n    timeoutRef.current = setTimeout(() => {\n      setCountdown('GO!');\n      setLightColor('green');\n      const time = new Date().getTime();\n      setStartTime(time);\n      setIsReady(true);\n      console.log('Timer started, startTime set:', time);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n          <h2>Test Your Reaction Time!</h2>\n          <div\n            className=\"countdown-display\"\n            style={{\n              color: countdown === 'GO!' ? '#00ff00' : '#ffcc00',\n            }}\n          >\n            {countdown}\n          </div>\n          <div\n            className=\"light-indicator\"\n            style={{\n              backgroundColor: lightColor,\n            }}\n          ></div>\n          <p>Press and hold the spacebar, then release when the light turns green!</p>\n          {reactionTime && (\n            <div className=\"reaction-time-result\">\n              Your Reaction Time: {reactionTime} seconds\n            </div>\n          )}\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReactionTimeModal;\n\n\n\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":42,"column":26,"nodeType":"27","messageId":"28","endLine":42,"endColumn":40},{"ruleId":"29","severity":1,"message":"30","line":70,"column":6,"nodeType":"31","endLine":70,"endColumn":48,"suggestions":"32"},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-self-assign","'effectivePower' is assigned to itself.","Identifier","selfAssignment","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startCountdown'. Either include it or remove the dependency array.","ArrayExpression",["35"],"no-global-assign","no-unsafe-negation",{"desc":"36","fix":"37"},"Update the dependencies array to be: [isHoldingSpace, redlight, recordReaction, startCountdown]",{"range":"38","text":"39"},[2758,2800],"[isHoldingSpace, redlight, recordReaction, startCountdown]"]